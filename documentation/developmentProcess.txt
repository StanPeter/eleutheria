"""
	1. What application and Why?
		- A flight search web application searching flights from commercial companies such as Ryanair using their API / or legally scraped data
		- Specialized on Europe sector
		- Created for learning purposes

		- There are thousands of flight companies and at least hunders of those who sell tickets from existing companies 
		but all I've seen were missing improved search filters or good UI or UX


	2. Functionality
		- Authentication and Authorization with three types: User || Admin || Owner
			- User shall have basic features of seeing, buying with already filled forms...
			- Admin can modify some stuff + can see most what Owner but without update options
			- Owner can see all User accounts and can manipulate with all data as well, he's a god in there
		- Change and lost password
		- Search(departure, return, anytime, one-way, range of dates, multiple cities, )
		- Display all possible destinations(Europe)
		- Scrape multiple widely used companies -> using their API or robots.txt allowed parts(not commercial purposes anyway)
		- Detail about logged user
		- User can see history of his flights
		- CRUD according to rights
		- User will be gaining bonus credits from each bought flight
		- Frequently asked question section
		- Section with explained airlines information / restrictions
		- Link on Nomadenlager app which is specialized on different hiking trips around Europe

		- Currency change
		- Language change



	3. Languages, Technologies(version)

		FE: HTML(5), CSS(3), Bootstrap(4), React(17), Redux, Typescript(4)
		BE: Node(15), Express(4), MongoDB(4)

		others: GraphQL, git, firebase, Travis|Jekin(not sure yet)


	4. Sketch your web app(wireframe) NOT DONE
		- This involves browsing over other apps and inventing an idea about design (just sketch, not 100 % )

		When sketching, consider the following:
			Navigation
			Branding
			Forms
			Buttons
			Any other interactive elements

		- Once again, don’t get carried here. Your sketch is for communicating and experimenting,
		not selling. Overcomplicating the design at this stage will only lead to frustration.


	5. Ideas from other existing applications
		- https://www.britishairways.com
			- Terms and conditions which doesn't blind or piss off user
			- Footer quite many links + policy
		- https://www.kiwi.com/
			- Great design
			- Many useful features
		- https://www.skyscanner.net/
			- Very simple
		- https://www.opodo.com/
			- Quite simple as well, might be useful
		- https://www.tripadvisor.com/
			- Nice search bar dropdown when scrolling down but terrible background
		















	6. Wireframing / Prototyping Your Web Application
		- Now real wireframe of all pages

		- Use: 'Figma' or 'Balsamiq'


	7. Seek early validation(only for real app of course)
		- Find out whether your app could be used


		Tips before development:
			-Attempt to get a small section of your app fully working. What we would call a “Complete Vertical”.
		Building the smallest possible section will allow you to piece all the bits together, and iron out those creases early.
		You will get great satisfaction early by having something working - great motivation.
		Create things that you know you will throw away later - if it gets you something working now.

			-At the start - expect things to change a lot as you learn and discover what you haven’t thought about.
		Have faith that your app will stabilise.
		Don’t be afraid to make big changes.

			-Spend time learning your tools.
		You may feel like you are wasting your time, reading, or experimenting with “hello world”. Learning the correct way to do things 				will have a huge positive, cumulative effect on your productivity over time.

		Where possible, “Go with the grain” of your tools. Realise that as soon as you step out of
		the normal flow / usage of your toolset, you are on your own and could be in a deep time sink.
		There are always exceptions to this of course!

			- Don’t avoid issues that need to be fixed.
		Face your issues head on - they will never go away and will only grow in stature.
		However, If things are still likely to change - its best to spend as little time as possible on things… It’s a tricky balance!



	8. Architect and build your database
		- Now it’s time to determine what information we will store in our database.
		-Decide whether to use SQL vs Document Database
		- Structure of tables(what sort of data?)


	9. Build FE and BE
		When building your web app, you need to choose between:

			Server Pages(Multiple Page Application)
			Single Page Application


		The primary jobs of the backend will be to:

			Provide HTTP endpoints for your frontend, which allow it to operate on your data. E.g. Create, Read, Update and Delete(“CRUD”) records.
			Authenticate users (verify they are who they say they are: aka log them in ).
			Authorization. When a logged in user makes a request, the backend will determine whether they are allowed(authorized) to perform the 				requested action.
			Serve the frontend


		Login/User & Session Management

			How will users authenticate?
			Username and password?
			Open ID(i.e. sign in as Google, FB, etc)
			Be sure to read up on security best practices. I highly recommend: OWASP
			What user levels will you create in the system?


		Environments. You will usually need to create multiple environments. For example:

			Testing - for all the latest development features.
			Beta - to give early releases to clients.
			Production - Your live system.


		CODING TIME

		a) set up both FE and BE

		b) FE wireframe + structure of UI components / components / layout -> create the index page

		c) BE api structure and DB structure(connect with 8. idea)

		d) FE add routes, redux? -> reducers, actions, typescript

		e) add graphQL / others

		f) Do BE/FE validation

		g) FE mockData + other pages

		h) BE basic api

		j)...


	10. Host your web application

		If you are not using Budibase to host your web application, follow these quick steps:

		-Buy a domain - Namecheap
		- Buy/Setup an SSL certificate - Let’s Encrypt
		- Choose a cloud provider:
			Amazon
			MS Azure
			Google Cloud Platform
			Lower cost: Digital Ocean / Linode - if you are happy managing your own VMs

		Zeit Now, Heroku, Firebase are interesting alternatives that aim to be faster and easier to get things done
		 - you should read about what they offer.

		Choosing one of these hosting options will almost certainly provide you with everything you need. They have ample documentation and community support, and are generally reliable options.


	11. Deploy your web app

		- How does your application get from Source Control / Your computer to your cloud hosting provider?

		- The following development tools provide continuous integration and will help you with deploying your web app to your cloud hosting:
			GitLab
			Bitbucket
			Jenkins


"""
	
	
